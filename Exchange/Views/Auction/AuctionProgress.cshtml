@model Exchange.ViewModel.Auction.AuctionViewModel

@{
    ViewBag.Title = "Auction";
}
<h2>Przebieg aukcji</h2>

@section style
{
    <link rel="stylesheet" type="text/css" href="~/Content/timeline.css">
}

<div class="row">
    <div class="col-xs-4">
        <dl class="dl-horizontal">
            <dt>Numer aukcji</dt>
            <dd>@Model.Id</dd>
            <dt>Nazwa użytkownika</dt>
            <dd>@Model.UserName</dd>
            <dt>Nazwa produktu</dt>
            <dd>@Model.Name</dd>
            <dt>Cena początkowa</dt>
            <dd>@Model.OpenPrice</dd>
        </dl>
    </div>
    <div class="col-xs-6">
        <dl class="dl-horizontal">
            <dt>Data rozpoczęcia</dt>
            <dd>@Model.StartDate</dd>
            <dt>Data zakończenia</dt>
            <dd>@Model.PredictedEndDate</dd>
        </dl>
    </div>
</div>

<div class="row" style="margin-bottom: 25px;">
    <form class="form-inline" data-bind="submit: submitOffer">
        <label class="col-xs-2">Zaproponuj kwote</label>
        <div class="form-group col-xs-4">
            <div class="input-group">
                <span class="input-group-addon">PLN</span>
                <input type="text" data-bind="value: PriceToOffer" class="form-control validate-offerPrice" placeholder="Kwota">
            </div>
        </div>
        <div class="col-xs-4">
            <button type="submit" class="btn btn-primary">Licytuj</button>
        </div>
    </form>
</div>

<div class="container">
    <div class="page-header">
        <h2 id="timeline">Przebieg aukcji</h2>
    </div>
    <ul class="timeline" data-bind="foreach: AuctionOffers">
        <li data-bind="css: { 'timeline-inverted': TimelineInverted}">
            <div class="timeline-badge">
                <i class="glyphicon glyphicon-thumbs-up"></i>
            </div>
            <div class="timeline-panel">
                <div class="timeline-heading">
                    <h4 class="timeline-title" data-bind="text: UserName"></h4>
                    <p>
                        <small class="text-muted" data-bind="text: Date">
                            <i class="glyphicon glyphicon-time"></i>
                        </small>
                    </p>
                </div>
                <div class="timeline-body">
                    <p>Użytkownik zaproponował cene <strong data-bind="text: Price"></strong> PLN.</p>
                </div>
            </div>
        </li>
    </ul>
</div>

@section scripts
{
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/Scripts/KnockoutModels/AuctionVM.js")
    <script src="~/Scripts/jquery.signalR-2.1.2.js"></script>
    <script src="~/signalr/hubs"></script>

    <script>


        var model = '@Html.Raw(HttpUtility.JavaScriptStringEncode(Newtonsoft.Json.JsonConvert.SerializeObject(Model)))';
        var addOfferUrl = '@Url.Action("AddOffer", "Auction")';
        var viewModel = new AuctionViewModel(model, addOfferUrl);
        ko.applyBindings(viewModel);
        defineValidationRules();

        var auctionHub = $.connection.auctionProgressHub;
        auctionHub.client.addStockPrice = function(auctionOffer) {
            viewModel.addOffer(auctionOffer);
        };

        $.connection.hub.start();

        function ValidateInteger(value, element, param) {
            if (!value) {
                // Null and empty strings are invalid as far as we are concerned.
                return false;
            }
            var parsedNumber = parseInt(value);
            if (isNaN(parsedNumber)) {
                return false;
            } else {
                return (value == parsedNumber);
            }
        }

        function ValidateBiggestPrice(value) {
            if (!value) {
                return false;
            }
            return value >= viewModel.getBiggestPrice();
        };

        function defineValidationRules() {
            $.validator.addMethod("offerPrice", $.validator.methods.required, "Należy podać cene");
            $.validator.addMethod("offerNumber", ValidateInteger, "Cena musi być liczbą");
            $.validator.addMethod("offerMinPrice", $.validator.methods.min, $.format("Cena musi być większa niż {0} PLN"));
            $.validator.addMethod("offerBiggestPrice", ValidateBiggestPrice, "Cena musi być większa niż cena poprzedniej oferty - {0} PLN");

            $.validator.addClassRules("validate-offerPrice", { offerPrice: true, offerNumber: true, offerMinPrice: 0, offerBiggestPrice: viewModel.getBiggestPrice() });
        };
    </script>
}
