@model dynamic
@{
    ViewBag.Title = "Monitor Akcji";
}

<h2>@ViewBag.Title</h2>

<div id="stockTable" class="row">
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Symbol</th>
                <th>Wartość</th>
                <th>Otwarcie</th>
                <th>Zmiana</th>
                <th>%</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: stocks">
            <tr>
                <td data-bind="text: symbol" />
                <td data-bind="text: priceDisplay" />
                <td data-bind="text: dayOpenDisplay" />
                <td data-bind="text: changeDisplay" />
                <td data-bind="text: percentChangeDisplay" />
            </tr>
        </tbody>
    </table>
</div>

<div id="chart"></div>

@section style
{
    @Styles.Render("~/Content/c3")
}

@section scripts
{
    <script src="~/Scripts/jquery.signalR-2.1.2.js"></script>
    <script src="~/signalr/hubs"></script>

    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/Scripts/KnockoutModels/stockPriceVM.js")
    @Scripts.Render("~/bundles/c3")

    <script>
        $(function () {
            var chart = c3.generate({
                bindto: '#chart',
                data: {
                    columns: []
                },
                axis: {
                    x: {
                        type: 'timeseries',
                        tick: {
                            format: '%Y-%m-%d %H:%M:%S'
                        }
                    }
                }
            });

            var viewModel = new stockMonitorViewModel();
            ko.applyBindings(viewModel);
            

            var ticker = $.connection.stockMonitorHub,
                chartStocks = {};

            function updateChart(stock) {
                if (chartStocks[stock.Symbol] === undefined || chartStocks[stock.Symbol].values === undefined) {
                    chartStocks[stock.Symbol] = {};
                    chartStocks[stock.Symbol].values = [stock.Price];

                    var d1 = new Date(stock.LastChangeDate);
                    var dateString1 = d1.getFullYear().toString() + "-" + d1.getMonth().toString() + "-" + d1.getDate().toString() + " " + d1.getHours().toString() + ":" + d1.getMinutes().toString() + ":" + d1.getSeconds().toString();
                    chartStocks[stock.Symbol].time = [dateString1];
                } else {
                    chartStocks[stock.Symbol].values.push(stock.Price);
                    var d = new Date(stock.LastChangeDate);
                    var dateString = d.getFullYear().toString() + "-" + d.getMonth().toString() + "-" + d.getDate().toString() + " " + d.getHours().toString() + ":" + d.getMinutes().toString() + ":" + d.getSeconds().toString();
                    chartStocks[stock.Symbol].time.push(dateString);

                    if (chartStocks[stock.Symbol].values.length > 10) {
                        chartStocks[stock.Symbol].values.shift();
                        chartStocks[stock.Symbol].time.shift();
                    }
                }


                var stockSymbol = stock.Symbol;
                var xStockSymbol = 'x' + stockSymbol;

                chart.load({
                    xs: {
                        stockSymbol: xStockSymbol
                    },
                    columns: [
                        [xStockSymbol].concat(chartStocks[stock.Symbol].time),
                        [stockSymbol].concat(chartStocks[stock.Symbol].values)
                    ]
                });

                
            }

            function init() {
                ticker.server.getAllStocks().done(function(stocks) {
                    viewModel.loadStocks(stocks);

                    $.each(stocks, function (stock) {
                        updateChart(stock);
                    });
                });
            };

            ticker.client.updateStockPrice = function(stock) {
                viewModel.updateStockPrice(stock);
                updateChart(stock);
            }

            $.connection.hub.start().done(init);
        });
    </script>
}
