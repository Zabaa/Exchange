@using System.Web.UI.WebControls
@model dynamic

@{
    ViewBag.Title = "Monitor Akcji";
}

<h2>@ViewBag.Title</h2>


<div id="stockTable" class="row">
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Symbol</th>
                <th>Wartość</th>
                <th>Otwarcie</th>
                <th>Zmiana</th>
                <th>%</th>
            </tr>
        </thead>
        <tbody>
            <tr class="loading"><td colspan="5">loading...</td></tr>
        </tbody>
    </table>
</div>

<div id="chart"></div>

@section style
{
    @Styles.Render("~/Content/c3")
}

@section scripts
{
    <script src="~/Scripts/jquery.signalR-2.1.2.js"></script>
    <script src="~/signalr/hubs"></script>

    @Scripts.Render("~/bundles/c3")

    <script>
        if (!String.prototype.supplant) {
            String.prototype.supplant = function(o) {
                return this.replace(/{([^{}]*)}/g,
                    function(a, b) {
                        var r = o[b];
                        return typeof r === 'string' || typeof r === 'number' ? r : a;
                    }
                );
            };
        }

        $(function() {

            var chart = c3.generate({
                bindto: '#chart',
                data: {
                    x: 'x',
                    columns: [
                        //['x'].concat(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04', '2013-01-05', '2013-01-06']),
                        //['data1'].concat([30, 200, 100, 400, 150, 250]),
                        //['data2'].concat([50, 20, 10, 40, 15, 25])
                    ],
                    xFormat: '%Y-%m-%d %H:%M:%S'
                },
                axis: {
                    x: {
                        type: 'timeseries',
                        tick: {
                            format: '%H:%M:%S'
                        }
                    }
                }
            });

            var ticker = $.connection.stockMonitorHub,
                chartStocks = {},
                chartTime = [],
                up = '▲',
                down = '▼',
                $stockTable = $('#stockTable'),
                $stockTableBody = $stockTable.find('tbody'),
                rowTemplate = '<tr data-symbol="{Symbol}"><td>{Symbol}</td><td>{Price}</td><td>{DayOpen}</td><td>{Direction} {Change}</td><td>{PercentChange}</td></tr>';

            function formatStock(stock) {
                return $.extend(stock, {
                    Price: stock.Price.toFixed(2),
                    PercentChange: (stock.PercentChange * 100).toFixed(2) + '%',
                    Direction: stock.Change === 0 ? '' : stock.Change >= 0 ? up : down
                });
            }

            function updateChart(stock) {
                var key;
                var lastValue;
                if (chartStocks[stock.Symbol] === undefined || chartStocks[stock.Symbol].values === undefined) {
                    chartStocks[stock.Symbol] = {};
                    chartStocks[stock.Symbol].values = [stock.Price];

                    var d1 = new Date(stock.LastChangeDate);
                    var dateString1 = d1.getFullYear().toString() + "-" + d1.getMonth().toString() + "-" + d1.getDate().toString() + " " + d1.getHours().toString() + ":" + d1.getMinutes().toString() + ":" + d1.getSeconds().toString();
                    chartStocks[stock.Symbol].time = [dateString1];
                } else {
                    chartStocks[stock.Symbol].values.push(stock.Price);
                    var d = new Date(stock.LastChangeDate);
                    var dateString = d.getFullYear().toString() + "-" + d.getMonth().toString() + "-" + d.getDate().toString() + " " + d.getHours().toString() + ":" + d.getMinutes().toString() + ":" + d.getSeconds().toString();
                    chartStocks[stock.Symbol].time.push(dateString);

                    if (chartStocks[stock.Symbol].values.length > 10) {
                        chartStocks[stock.Symbol].values.shift();
                        chartStocks[stock.Symbol].time.shift();
                    }
                }

                chart.load({
                    columns: [
                        [stock.Symbol].concat(chartStocks[stock.Symbol].values),
                        ['x'].concat(chartStocks[stock.Symbol].time)
                    ]
                });
            }

            function init() {
                ticker.server.getAllStocks().done(function(stocks) {
                    $stockTableBody.empty();
                    $.each(stocks, function() {
                        var stock = formatStock(this);
                        $stockTableBody.append(rowTemplate.supplant(stock));
                        updateChart(stock);
                    });
                });
            };

            ticker.client.updateStockPrice = function(stock) {
                var displayStock = formatStock(stock),
                    $row = $(rowTemplate.supplant(displayStock));

                $stockTableBody.find('tr[data-symbol=' + stock.Symbol + ']')
                    .replaceWith($row);

                updateChart(stock);
            }

            ticker.client.updateStocksPrice = function(stocks) {
                $stockTableBody.empty();
                $.each(stocks, function () {
                    var stock = formatStock(this);
                    $stockTableBody.append(rowTemplate.supplant(stock));
                    //updateChart(stock);
                });
            }

            $.connection.hub.start().done(init);

        });

    </script>
}
